// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "admin",
            "url": "http://subalgo.com/support",
            "email": "admin@subalgo.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login data",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/provider/login": {
            "post": {
                "description": "Login for market providers with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Provider Login",
                "parameters": [
                    {
                        "description": "Provider Login data",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ProviderLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ProviderLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/provider/register": {
            "post": {
                "description": "Register a new market provider with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register Provider",
                "parameters": [
                    {
                        "description": "Register provider request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.MarketProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.MarketProvider"
                        }
                    },
                    "400": {
                        "description": "Failed to register provider",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Provider email already exists",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "Register request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to register user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bookings/create": {
            "post": {
                "description": "Create a new booking with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Create a booking",
                "parameters": [
                    {
                        "description": "Booking data",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.BookingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.BookingResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Booking already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bookings/get/{id}": {
            "get": {
                "description": "Get a booking with the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Get a booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.BookingResponse"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bookings/user/{id}": {
            "get": {
                "description": "Get bookings by user with the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Get bookings by user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Booking"
                            }
                        }
                    },
                    "404": {
                        "description": "Bookings not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dashboard/weekly/{id}": {
            "get": {
                "description": "Get weekly stats for a market with the market ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dashboard"
                ],
                "summary": "Get weekly stats for a market",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.DashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/markets/create": {
            "post": {
                "description": "Create a new market",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Market"
                ],
                "summary": "Create a new market",
                "parameters": [
                    {
                        "description": "Market object that needs to be created",
                        "name": "market",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.MarketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.MarketResponse"
                        }
                    }
                }
            }
        },
        "/markets/edit/{id}": {
            "patch": {
                "description": "Edit a market",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Market"
                ],
                "summary": "Edit a market",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Market object that needs to be updated",
                        "name": "market",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.MarketEditRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Market"
                        }
                    }
                }
            }
        },
        "/markets/get": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Market"
                ],
                "summary": "Get all markets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetListMarketResponse"
                        }
                    }
                }
            }
        },
        "/markets/get/{id}": {
            "get": {
                "description": "Get a market by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Market"
                ],
                "summary": "Get a market by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Market"
                        }
                    }
                }
            }
        },
        "/markets/provider/get/{id}": {
            "get": {
                "description": "Get a market by Provider ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Market"
                ],
                "summary": "Get a market by Provider ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.MarketResponse"
                        }
                    }
                }
            }
        },
        "/payments/get/{id}": {
            "get": {
                "description": "Get payment by the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.BookingResponse"
                        }
                    },
                    "404": {
                        "description": "Payment not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/slots/delete/{id}": {
            "delete": {
                "description": "Delete slot",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Delete slot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/slots/delete/{id}/zone/{zoneID}/date/{date}": {
            "delete": {
                "description": "Delete slot by date and zone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Delete slot by date and zone",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Zone ID",
                        "name": "zoneID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/slots/edit/{id}": {
            "patch": {
                "description": "Edit slot",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Edit slot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Slot update data",
                        "name": "updateDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.SlotUpdateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Slot"
                        }
                    }
                }
            }
        },
        "/slots/get/{id}": {
            "get": {
                "description": "Get all slots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Get all slots",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Slot"
                        }
                    }
                }
            }
        },
        "/slots/markets/{marketID}/date/{date}": {
            "get": {
                "description": "Get slots by date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Get slots by date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MarketID",
                        "name": "marketID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Slot"
                            }
                        }
                    }
                }
            }
        },
        "/slots/provider/get/{id}": {
            "get": {
                "description": "Get provider slots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Get provider slots",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Slot"
                            }
                        }
                    }
                }
            }
        },
        "/slots/{marketId}/create": {
            "post": {
                "description": "Create or update layout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "slots"
                ],
                "summary": "Create or update layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market ID",
                        "name": "marketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Layout data",
                        "name": "layout",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LayoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a user with the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetUserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user with the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "You are not authorized to delete this user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.BookingDtos": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dtos.BookingRequest": {
            "type": "object",
            "required": [
                "booking_date",
                "market_id",
                "method",
                "price",
                "vendor_id"
            ],
            "properties": {
                "booking_date": {
                    "type": "string"
                },
                "market_id": {
                    "description": "Required, selected by the user",
                    "type": "string"
                },
                "method": {
                    "enum": [
                        "PromptPay"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Method"
                        }
                    ]
                },
                "price": {
                    "type": "number"
                },
                "slot_id": {
                    "type": "string"
                },
                "vendor_id": {
                    "description": "Required, selected by the user",
                    "type": "string"
                }
            }
        },
        "dtos.BookingResponse": {
            "type": "object",
            "properties": {
                "bookingDate": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "method": {
                    "$ref": "#/definitions/entities.Method"
                },
                "price": {
                    "type": "number"
                },
                "slotId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entities.BookingStatus"
                },
                "transactionId": {
                    "type": "string"
                },
                "vendorId": {
                    "type": "string"
                }
            }
        },
        "dtos.GetListMarketResponse": {
            "type": "object",
            "properties": {
                "market": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.MarketResponse"
                    }
                }
            }
        },
        "dtos.GetUserResponse": {
            "type": "object",
            "properties": {
                "bookings": {
                    "$ref": "#/definitions/dtos.BookingDtos"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dtos.LayoutRequest": {
            "type": "object",
            "properties": {
                "layout": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ZoneLayout"
                    }
                }
            }
        },
        "dtos.MarketEditRequest": {
            "type": "object",
            "required": [
                "address",
                "close_time",
                "name",
                "open_time",
                "provider_id"
            ],
            "properties": {
                "address": {
                    "description": "Required, address of the market",
                    "type": "string"
                },
                "close_time": {
                    "description": "Required, closing time in HH:mm format",
                    "type": "string"
                },
                "description": {
                    "description": "Optional, description of the market",
                    "type": "string"
                },
                "image": {
                    "description": "Optional, URL or path to the market image",
                    "type": "string"
                },
                "latitude": {
                    "description": "Optional, latitude coordinate",
                    "type": "string"
                },
                "layout_image": {
                    "description": "Optional, URL or path to the market layout image",
                    "type": "string"
                },
                "longitude": {
                    "description": "Optional, longitude coordinate",
                    "type": "string"
                },
                "name": {
                    "description": "Required, name of the market",
                    "type": "string"
                },
                "open_time": {
                    "description": "Required, opening time in HH:mm format",
                    "type": "string"
                },
                "phone": {
                    "description": "Optional, phone number of the market",
                    "type": "string"
                },
                "provider_id": {
                    "description": "Required, UUID of the provider",
                    "type": "string"
                }
            }
        },
        "dtos.MarketProviderRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "phone",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Required, email address of the provider",
                    "type": "string"
                },
                "password": {
                    "description": "Required, password of the provider",
                    "type": "string"
                },
                "phone": {
                    "description": "Required, phone number of the provider",
                    "type": "string"
                },
                "username": {
                    "description": "Required, username of the provider",
                    "type": "string"
                }
            }
        },
        "dtos.MarketRequest": {
            "type": "object",
            "required": [
                "address",
                "close_time",
                "name",
                "open_time",
                "provider_id"
            ],
            "properties": {
                "address": {
                    "description": "Required, address of the market",
                    "type": "string"
                },
                "close_time": {
                    "description": "Required, closing time in HH:mm format",
                    "type": "string"
                },
                "description": {
                    "description": "Optional, description of the market",
                    "type": "string"
                },
                "image": {
                    "description": "Optional, URL or path to the market image",
                    "type": "string"
                },
                "latitude": {
                    "description": "Optional, latitude coordinate",
                    "type": "string"
                },
                "longitude": {
                    "description": "Optional, longitude coordinate",
                    "type": "string"
                },
                "name": {
                    "description": "Required, name of the market",
                    "type": "string"
                },
                "open_time": {
                    "description": "Required, opening time in HH:mm format",
                    "type": "string"
                },
                "provider_id": {
                    "description": "Required, UUID of the provider",
                    "type": "string"
                }
            }
        },
        "dtos.MarketResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "the data to be returned",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Market"
                    }
                },
                "message": {
                    "description": "message to accompany the response",
                    "type": "string"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        },
        "dtos.ProviderLoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dtos.ProviderLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "provider_id": {
                    "type": "string"
                }
            }
        },
        "dtos.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password",
                "phone_number",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Required, must be a valid email format",
                    "type": "string"
                },
                "firstname": {
                    "description": "Required, min 3, max 50 characters",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "lastname": {
                    "description": "Required, min 3, max 50 characters",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "password": {
                    "description": "Required, min 8 characters for password",
                    "type": "string",
                    "minLength": 8
                },
                "phone_number": {
                    "description": "Required, adjust based on the expected format=",
                    "type": "string",
                    "maxLength": 10
                },
                "username": {
                    "description": "Required, min 3, max 50 characters",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "dtos.RegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dtos.SlotUpdateDTO": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/entities.Category"
                },
                "height": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/entities.SlotStatus"
                },
                "width": {
                    "type": "number"
                }
            }
        },
        "dtos.Stall": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "stallType": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "dtos.ZoneLayout": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "stalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.Stall"
                    }
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "entities.Booking": {
            "type": "object",
            "properties": {
                "booking_date": {
                    "description": "Changed from Date to BookingDate",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "market_id": {
                    "type": "string"
                },
                "method": {
                    "$ref": "#/definitions/entities.Method"
                },
                "payment": {
                    "$ref": "#/definitions/entities.Payment"
                },
                "price": {
                    "type": "number"
                },
                "slot": {
                    "$ref": "#/definitions/entities.Slot"
                },
                "slot_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entities.BookingStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "vendor": {
                    "$ref": "#/definitions/entities.Vendor"
                },
                "vendor_id": {
                    "type": "string"
                }
            }
        },
        "entities.BookingStatus": {
            "type": "string",
            "enum": [
                "pending",
                "cancelled",
                "completed",
                "refund"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusCancelled",
                "StatusCompleted",
                "StatusRefunded"
            ]
        },
        "entities.Category": {
            "type": "string",
            "enum": [
                "clothes",
                "food",
                "crafts",
                "produce",
                "electronics",
                "services",
                "other"
            ],
            "x-enum-varnames": [
                "CategoryClothes",
                "CategoryFood",
                "CategoryCrafts",
                "CategoryProduce",
                "CategoryElectronics",
                "CategoryServices",
                "CategoryOther"
            ]
        },
        "entities.DashboardResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "description": "Changed to slice",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.MarketDashboardStats"
                    }
                }
            }
        },
        "entities.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username_or_email"
            ],
            "properties": {
                "password": {
                    "description": "Password must be provided and at least 8 characters long",
                    "type": "string",
                    "minLength": 8
                },
                "username_or_email": {
                    "description": "Accepts either username or email",
                    "type": "string"
                }
            }
        },
        "entities.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "vendor_id": {
                    "type": "string"
                }
            }
        },
        "entities.Market": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "close_time": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "latitude": {
                    "type": "string"
                },
                "layout_image": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "open_time": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/entities.MarketProvider"
                },
                "provider_id": {
                    "type": "string"
                },
                "slots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Slot"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entities.MarketDashboardStats": {
            "type": "object",
            "properties": {
                "booking_growth": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "market_id": {
                    "type": "string"
                },
                "occupancy_rate": {
                    "type": "number"
                },
                "revenue_growth": {
                    "type": "number"
                },
                "top_zone": {
                    "type": "string"
                },
                "top_zone_occupancy": {
                    "type": "number"
                },
                "total_bookings": {
                    "type": "integer"
                },
                "total_cancel_bookings": {
                    "type": "integer"
                },
                "total_confirm_bookings": {
                    "type": "integer"
                },
                "total_pending_bookings": {
                    "type": "integer"
                },
                "total_revenue": {
                    "type": "number"
                }
            }
        },
        "entities.MarketProvider": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "markets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Market"
                    }
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.Method": {
            "type": "string",
            "enum": [
                "PromptPay"
            ],
            "x-enum-varnames": [
                "MethodPromptPay"
            ]
        },
        "entities.Payment": {
            "type": "object",
            "properties": {
                "booking": {
                    "$ref": "#/definitions/entities.Booking"
                },
                "booking_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "method": {
                    "$ref": "#/definitions/entities.Method"
                },
                "payment_date": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/entities.PaymentStatus"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Transaction"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entities.PaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "PaymentPending",
                "PaymentCompleted",
                "PaymentFailed"
            ]
        },
        "entities.Slot": {
            "type": "object",
            "required": [
                "date"
            ],
            "properties": {
                "booking": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Booking"
                    }
                },
                "category": {
                    "$ref": "#/definitions/entities.Category"
                },
                "created_at": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "market_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/entities.SlotStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "entities.SlotStatus": {
            "type": "string",
            "enum": [
                "available",
                "booked",
                "maintenance"
            ],
            "x-enum-varnames": [
                "StatusAvailable",
                "StatusBooked",
                "StatusMaintenance"
            ]
        },
        "entities.Transaction": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "payment": {
                    "$ref": "#/definitions/entities.Payment"
                },
                "payment_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "ref1": {
                    "type": "string"
                },
                "ref2": {
                    "type": "string"
                },
                "ref3": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entities.TransactionStatus"
                },
                "transaction_date": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entities.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "TransactionPending",
                "TransactionCompleted",
                "TransactionFailed"
            ]
        },
        "entities.Vendor": {
            "type": "object",
            "properties": {
                "bookings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Booking"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Talardnad API",
	Description:      "API user management Server by Fiber | Doc by Swagger.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
