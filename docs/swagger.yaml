basePath: /api/v1
definitions:
  dtos.BookingDtos:
    properties:
      ids:
        items:
          type: string
        type: array
    type: object
  dtos.BookingRequest:
    properties:
      booking_date:
        type: string
      market_id:
        description: Required, selected by the user
        type: string
      method:
        allOf:
        - $ref: '#/definitions/entities.Method'
        enum:
        - PromptPay
      price:
        type: number
      slot_id:
        type: string
      vendor_id:
        description: Required, selected by the user
        type: string
    required:
    - booking_date
    - market_id
    - method
    - price
    - vendor_id
    type: object
  dtos.BookingResponse:
    properties:
      bookingDate:
        type: string
      expiresAt:
        type: string
      id:
        type: string
      image:
        type: string
      method:
        $ref: '#/definitions/entities.Method'
      price:
        type: number
      slotId:
        type: string
      status:
        $ref: '#/definitions/entities.BookingStatus'
      transactionId:
        type: string
      vendorId:
        type: string
    type: object
  dtos.GetListMarketResponse:
    properties:
      market:
        items:
          $ref: '#/definitions/dtos.MarketResponse'
        type: array
    type: object
  dtos.GetUserResponse:
    properties:
      bookings:
        $ref: '#/definitions/dtos.BookingDtos'
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      username:
        type: string
    type: object
  dtos.LayoutRequest:
    properties:
      layout:
        items:
          $ref: '#/definitions/dtos.ZoneLayout'
        type: array
    type: object
  dtos.MarketEditRequest:
    properties:
      address:
        description: Required, address of the market
        type: string
      close_time:
        description: Required, closing time in HH:mm format
        type: string
      description:
        description: Optional, description of the market
        type: string
      image:
        description: Optional, URL or path to the market image
        type: string
      latitude:
        description: Optional, latitude coordinate
        type: string
      layout_image:
        description: Optional, URL or path to the market layout image
        type: string
      longitude:
        description: Optional, longitude coordinate
        type: string
      name:
        description: Required, name of the market
        type: string
      open_time:
        description: Required, opening time in HH:mm format
        type: string
      phone:
        description: Optional, phone number of the market
        type: string
      provider_id:
        description: Required, UUID of the provider
        type: string
    required:
    - address
    - close_time
    - name
    - open_time
    - provider_id
    type: object
  dtos.MarketProviderRequest:
    properties:
      email:
        description: Required, email address of the provider
        type: string
      password:
        description: Required, password of the provider
        type: string
      phone:
        description: Required, phone number of the provider
        type: string
      username:
        description: Required, username of the provider
        type: string
    required:
    - email
    - password
    - phone
    - username
    type: object
  dtos.MarketRequest:
    properties:
      address:
        description: Required, address of the market
        type: string
      close_time:
        description: Required, closing time in HH:mm format
        type: string
      description:
        description: Optional, description of the market
        type: string
      image:
        description: Optional, URL or path to the market image
        type: string
      latitude:
        description: Optional, latitude coordinate
        type: string
      longitude:
        description: Optional, longitude coordinate
        type: string
      name:
        description: Required, name of the market
        type: string
      open_time:
        description: Required, opening time in HH:mm format
        type: string
      provider_id:
        description: Required, UUID of the provider
        type: string
    required:
    - address
    - close_time
    - name
    - open_time
    - provider_id
    type: object
  dtos.MarketResponse:
    properties:
      data:
        description: the data to be returned
        items:
          $ref: '#/definitions/entities.Market'
        type: array
      message:
        description: message to accompany the response
        type: string
      status:
        description: success or error
        type: string
    type: object
  dtos.ProviderLoginRequest:
    properties:
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dtos.ProviderLoginResponse:
    properties:
      access_token:
        type: string
      provider_id:
        type: string
    type: object
  dtos.RegisterRequest:
    properties:
      email:
        description: Required, must be a valid email format
        type: string
      firstname:
        description: Required, min 3, max 50 characters
        maxLength: 50
        minLength: 3
        type: string
      lastname:
        description: Required, min 3, max 50 characters
        maxLength: 50
        minLength: 3
        type: string
      password:
        description: Required, min 8 characters for password
        minLength: 8
        type: string
      phone_number:
        description: Required, adjust based on the expected format=
        maxLength: 10
        type: string
      username:
        description: Required, min 3, max 50 characters
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - phone_number
    - username
    type: object
  dtos.RegisterResponse:
    properties:
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  dtos.SlotUpdateDTO:
    properties:
      category:
        $ref: '#/definitions/entities.Category'
      height:
        type: number
      name:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/entities.SlotStatus'
      width:
        type: number
    type: object
  dtos.Stall:
    properties:
      height:
        type: integer
      name:
        type: string
      price:
        type: number
      stallType:
        type: string
      width:
        type: integer
    type: object
  dtos.ZoneLayout:
    properties:
      date:
        type: string
      stalls:
        items:
          $ref: '#/definitions/dtos.Stall'
        type: array
      zone:
        type: string
    type: object
  entities.Booking:
    properties:
      booking_date:
        description: Changed from Date to BookingDate
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      market_id:
        type: string
      method:
        $ref: '#/definitions/entities.Method'
      payment:
        $ref: '#/definitions/entities.Payment'
      price:
        type: number
      slot:
        $ref: '#/definitions/entities.Slot'
      slot_id:
        type: string
      status:
        $ref: '#/definitions/entities.BookingStatus'
      updated_at:
        type: string
      vendor:
        $ref: '#/definitions/entities.Vendor'
      vendor_id:
        type: string
    type: object
  entities.BookingStatus:
    enum:
    - pending
    - cancelled
    - completed
    - refund
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusCancelled
    - StatusCompleted
    - StatusRefunded
  entities.Category:
    enum:
    - clothes
    - food
    - crafts
    - produce
    - electronics
    - services
    - other
    type: string
    x-enum-varnames:
    - CategoryClothes
    - CategoryFood
    - CategoryCrafts
    - CategoryProduce
    - CategoryElectronics
    - CategoryServices
    - CategoryOther
  entities.DashboardResponse:
    properties:
      stats:
        description: Changed to slice
        items:
          $ref: '#/definitions/entities.MarketDashboardStats'
        type: array
    type: object
  entities.LoginRequest:
    properties:
      password:
        description: Password must be provided and at least 8 characters long
        minLength: 8
        type: string
      username_or_email:
        description: Accepts either username or email
        type: string
    required:
    - password
    - username_or_email
    type: object
  entities.LoginResponse:
    properties:
      access_token:
        type: string
      vendor_id:
        type: string
    type: object
  entities.Market:
    properties:
      address:
        type: string
      close_time:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      latitude:
        type: string
      layout_image:
        type: string
      longitude:
        type: string
      name:
        type: string
      open_time:
        type: string
      phone:
        type: string
      provider:
        $ref: '#/definitions/entities.MarketProvider'
      provider_id:
        type: string
      slots:
        items:
          $ref: '#/definitions/entities.Slot'
        type: array
      updated_at:
        type: string
    type: object
  entities.MarketDashboardStats:
    properties:
      booking_growth:
        type: number
      created_at:
        type: string
      date:
        type: string
      market_id:
        type: string
      occupancy_rate:
        type: number
      revenue_growth:
        type: number
      top_zone:
        type: string
      top_zone_occupancy:
        type: number
      total_bookings:
        type: integer
      total_cancel_bookings:
        type: integer
      total_confirm_bookings:
        type: integer
      total_pending_bookings:
        type: integer
      total_revenue:
        type: number
    type: object
  entities.MarketProvider:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: string
      markets:
        items:
          $ref: '#/definitions/entities.Market'
        type: array
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  entities.Method:
    enum:
    - PromptPay
    type: string
    x-enum-varnames:
    - MethodPromptPay
  entities.Payment:
    properties:
      booking:
        $ref: '#/definitions/entities.Booking'
      booking_id:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      method:
        $ref: '#/definitions/entities.Method'
      payment_date:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/entities.PaymentStatus'
      transactions:
        items:
          $ref: '#/definitions/entities.Transaction'
        type: array
      updated_at:
        type: string
    type: object
  entities.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - PaymentPending
    - PaymentCompleted
    - PaymentFailed
  entities.Slot:
    properties:
      booking:
        items:
          $ref: '#/definitions/entities.Booking'
        type: array
      category:
        $ref: '#/definitions/entities.Category'
      created_at:
        type: string
      date:
        type: string
      deleted_at:
        type: string
      height:
        type: integer
      id:
        type: string
      market_id:
        type: string
      name:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/entities.SlotStatus'
      updated_at:
        type: string
      width:
        type: integer
      zone:
        type: string
    required:
    - date
    type: object
  entities.SlotStatus:
    enum:
    - available
    - booked
    - maintenance
    type: string
    x-enum-varnames:
    - StatusAvailable
    - StatusBooked
    - StatusMaintenance
  entities.Transaction:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      image:
        type: string
      method:
        type: string
      payment:
        $ref: '#/definitions/entities.Payment'
      payment_id:
        type: string
      price:
        type: number
      ref1:
        type: string
      ref2:
        type: string
      ref3:
        type: string
      status:
        $ref: '#/definitions/entities.TransactionStatus'
      transaction_date:
        type: string
      transaction_id:
        type: string
      updated_at:
        type: string
    type: object
  entities.TransactionStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - TransactionPending
    - TransactionCompleted
    - TransactionFailed
  entities.Vendor:
    properties:
      bookings:
        items:
          $ref: '#/definitions/entities.Booking'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      image:
        type: string
      last_name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: admin@subalgo.com
    name: admin
    url: http://subalgo.com/support
  description: API user management Server by Fiber | Doc by Swagger.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Talardnad API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with the provided credentials
      parameters:
      - description: Login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/entities.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.LoginResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /auth/provider/login:
    post:
      consumes:
      - application/json
      description: Login for market providers with the provided credentials
      parameters:
      - description: Provider Login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.ProviderLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ProviderLoginResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Provider Login
      tags:
      - auth
  /auth/provider/register:
    post:
      consumes:
      - application/json
      description: Register a new market provider with the provided data
      parameters:
      - description: Register provider request
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dtos.MarketProviderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.MarketProvider'
        "400":
          description: Failed to register provider
          schema:
            type: string
        "409":
          description: Provider email already exists
          schema:
            type: string
      summary: Register Provider
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided data
      parameters:
      - description: Register request
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RegisterResponse'
        "400":
          description: Failed to register user
          schema:
            type: string
        "409":
          description: Email already exists
          schema:
            type: string
      summary: Register
      tags:
      - auth
  /bookings/create:
    post:
      consumes:
      - application/json
      description: Create a new booking with the provided data
      parameters:
      - description: Booking data
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/dtos.BookingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.BookingResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "409":
          description: Booking already exists
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a booking
      tags:
      - bookings
  /bookings/get/{id}:
    get:
      consumes:
      - application/json
      description: Get a booking with the provided ID
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.BookingResponse'
        "404":
          description: Booking not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get a booking
      tags:
      - bookings
  /bookings/user/{id}:
    get:
      consumes:
      - application/json
      description: Get bookings by user with the provided ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Booking'
            type: array
        "404":
          description: Bookings not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get bookings by user
      tags:
      - bookings
  /dashboard/weekly/{id}:
    get:
      consumes:
      - application/json
      description: Get weekly stats for a market with the market ID
      parameters:
      - description: Market ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.DashboardResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get weekly stats for a market
      tags:
      - dashboard
  /markets/create:
    post:
      consumes:
      - application/json
      description: Create a new market
      parameters:
      - description: Market object that needs to be created
        in: body
        name: market
        required: true
        schema:
          $ref: '#/definitions/dtos.MarketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.MarketResponse'
      summary: Create a new market
      tags:
      - Market
  /markets/edit/{id}:
    patch:
      consumes:
      - application/json
      description: Edit a market
      parameters:
      - description: Market ID
        in: path
        name: id
        required: true
        type: string
      - description: Market object that needs to be updated
        in: body
        name: market
        required: true
        schema:
          $ref: '#/definitions/dtos.MarketEditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Market'
      summary: Edit a market
      tags:
      - Market
  /markets/get:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetListMarketResponse'
      summary: Get all markets
      tags:
      - Market
  /markets/get/{id}:
    get:
      consumes:
      - application/json
      description: Get a market by ID
      parameters:
      - description: Market ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Market'
      summary: Get a market by ID
      tags:
      - Market
  /markets/provider/get/{id}:
    get:
      consumes:
      - application/json
      description: Get a market by Provider ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.MarketResponse'
      summary: Get a market by Provider ID
      tags:
      - Market
  /payments/get/{id}:
    get:
      consumes:
      - application/json
      description: Get payment by the provided ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.BookingResponse'
        "404":
          description: Payment not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get payment by ID
      tags:
      - payments
  /slots/{marketId}/create:
    post:
      consumes:
      - application/json
      description: Create or update layout
      parameters:
      - description: Market ID
        in: path
        name: marketId
        required: true
        type: string
      - description: Layout data
        in: body
        name: layout
        required: true
        schema:
          $ref: '#/definitions/dtos.LayoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create or update layout
      tags:
      - slots
  /slots/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete slot
      parameters:
      - description: Slot ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete slot
      tags:
      - slots
  /slots/delete/{id}/zone/{zoneID}/date/{date}:
    delete:
      consumes:
      - application/json
      description: Delete slot by date and zone
      parameters:
      - description: Slot ID
        in: path
        name: id
        required: true
        type: string
      - description: Zone ID
        in: path
        name: zoneID
        required: true
        type: string
      - description: Date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete slot by date and zone
      tags:
      - slots
  /slots/edit/{id}:
    patch:
      consumes:
      - application/json
      description: Edit slot
      parameters:
      - description: Slot ID
        in: path
        name: id
        required: true
        type: string
      - description: Slot update data
        in: body
        name: updateDTO
        required: true
        schema:
          $ref: '#/definitions/dtos.SlotUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Slot'
      summary: Edit slot
      tags:
      - slots
  /slots/get/{id}:
    get:
      consumes:
      - application/json
      description: Get all slots
      parameters:
      - description: Market ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Slot'
      summary: Get all slots
      tags:
      - slots
  /slots/markets/{marketID}/date/{date}:
    get:
      consumes:
      - application/json
      description: Get slots by date
      parameters:
      - description: MarketID
        in: path
        name: marketID
        required: true
        type: string
      - description: Date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Slot'
            type: array
      summary: Get slots by date
      tags:
      - slots
  /slots/provider/get/{id}:
    get:
      consumes:
      - application/json
      description: Get provider slots
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Slot'
            type: array
      summary: Get provider slots
      tags:
      - slots
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the provided ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "403":
          description: You are not authorized to delete this user
          schema:
            type: string
        "500":
          description: Failed to delete user
          schema:
            type: string
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user with the provided ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetUserResponse'
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
